// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace roulette_simulator.Migrations
{
    [DbContext(typeof(RouletteContext))]
    partial class RouletteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0-rc.2.23480.1");

            modelBuilder.Entity("Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Balance")
                        .HasColumnType("REAL");

                    b.HasKey("SessionId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Spin", b =>
                {
                    b.Property<int>("SpinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("BetAmmount")
                        .HasColumnType("REAL");

                    b.Property<int>("DrawNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SpinDate")
                        .HasColumnType("TEXT");

                    b.HasKey("SpinId");

                    b.HasIndex("SessionId");

                    b.ToTable("Spins");
                });

            modelBuilder.Entity("Spin", b =>
                {
                    b.HasOne("Session", "Session")
                        .WithMany("Spins")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Session", b =>
                {
                    b.Navigation("Spins");
                });
#pragma warning restore 612, 618
        }
    }
}
